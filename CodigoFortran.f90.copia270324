program control_GPIO
  implicit none
  character(len=50) :: command

  ! GPIO utilizados para generar numero
  integer :: GPIO_0 = 27
  integer :: GPIO_1 = 22
  integer :: GPIO_2 = 23
  integer :: GPIO_3 = 24
  integer :: GPIO_4 = 5
  integer :: GPIO_5 = 6
  integer :: GPIO_6 = 13
  integer :: GPIO_7 = 25

  integer :: bit0, bit1, bit2, bit3, bit4, bit5, bit6, bit7
  integer :: total, t, i
  integer, parameter :: n = 100
  integer :: ierr

  ! En caso que no se pase algun valor
  if (command_argument_count() /= 1) then
    print*, "No hay comando"
    print*, "Los comandos a utilizar son config, valor, cerrar"
    stop 2  ! Numero invalido de argumentos
  end if

  ! Configurar GPIO como entradas
  call get_command_argument(1, command)
  if (trim(command) == "config") then
    ! Configurar los GPIO
    call export_gpio(GPIO_0)
    call export_gpio(GPIO_1)
    call export_gpio(GPIO_2)
    call export_gpio(GPIO_3)
    call export_gpio(GPIO_4)
    call export_gpio(GPIO_5)
    call export_gpio(GPIO_6)
    call export_gpio(GPIO_7)
  end if

  ! Cierre de los puertos GPIO
  if (trim(command) == "cerrar") then
    ! Cerrar los GPIO
    call unexport_gpio(GPIO_0)
    call unexport_gpio(GPIO_1)
    call unexport_gpio(GPIO_2)
    call unexport_gpio(GPIO_3)
    call unexport_gpio(GPIO_4)
    call unexport_gpio(GPIO_5)
    call unexport_gpio(GPIO_6)
    call unexport_gpio(GPIO_7)
  end if

  ! Obtener tiempos y valores
  if (trim(command) == "valor") then
    open(unit=10, file='tiempo.txt', status='unknown', action='write')
    open(unit=20, file='valor.txt', status='unknown', action='write')

    do i = 1, n
      call obtener_tiempo(t)
      total = 0
      call leer_GPIO(GPIO_0, bit0)
      call leer_GPIO(GPIO_1, bit1)
      call leer_GPIO(GPIO_2, bit2)
      call leer_GPIO(GPIO_3, bit3)
      call leer_GPIO(GPIO_4, bit4)
      call leer_GPIO(GPIO_5, bit5)
      call leer_GPIO(GPIO_6, bit6)
      call leer_GPIO(GPIO_7, bit7)

      total = bit0 + bit1 + bit2 + bit3 + bit4 + bit5 + bit6 + bit7

      write(10, *) t
      write(20, *) total
    end do

    close(10)
    close(20)
  end if

contains

  subroutine export_gpio(gpio_num)
    integer, intent(in) :: gpio_num
    character(len=100) :: export_cmd
    character(len=10) :: gpio_str
    write(gpio_str, '(I0)') gpio_num
    write(export_cmd, '(A,A)') "/sys/class/gpio/export ", trim(adjustl(gpio_str))
    call system('echo "'//trim(export_cmd)//'" > /sys/class/gpio/export')
    call sleep(1)  ! para asegurar que se exporto correctamente
    call system('echo "in" > /sys/class/gpio/gpio'//trim(adjustl(gpio_str))//'/direction')
  end subroutine export_gpio

  subroutine unexport_gpio(gpio_num)
    integer, intent(in) :: gpio_num
    character(len=100) :: unexport_cmd
    character(len=10) :: gpio_str
    write(gpio_str, '(I0)') gpio_num
    write(unexport_cmd, '(A,A)') "/sys/class/gpio/unexport ", trim(adjustl(gpio_str))
    call system('echo "'//trim(unexport_cmd)//'" > /sys/class/gpio/unexport')
  end subroutine unexport_gpio

  subroutine leer_GPIO(gpio_num, value)
    integer, intent(in) :: gpio_num
    integer, intent(out) :: value
    character(len=100) :: gpio_file
    integer :: unit

    ! Construir la ruta al archivo GPIO
    write(gpio_file, '(A,I0,A)') "/sys/class/gpio/gpio", gpio_num, "/value"

    ! Leer el valor del GPIO
    open(newunit=unit, file=gpio_file, status='old')
    read(unit, *) value
    close(unit)
  end subroutine leer_GPIO

  subroutine obtener_tiempo(t)
    integer, intent(out) :: t
    integer :: ierr
    ! Obtener la fecha y hora actual
    call system_clock(t, ierr)
  end subroutine obtener_tiempo

end program control_GPIO

