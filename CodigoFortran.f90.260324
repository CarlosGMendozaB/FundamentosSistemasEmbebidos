program control_GPIO
    implicit none
    character(len=50) :: command
    character(len=50) :: tiempo_filename
    integer :: i, n, bit0, bit1, bit2, bit3, bit4, bit5, bit6, bit7, numero
    integer, dimension(:), allocatable :: valores

    ! GPIO utilizados para generar numero
    integer :: GPIO_0 = 27
    integer :: GPIO_1 = 22
    integer :: GPIO_2 = 17
    integer :: GPIO_3 = 4
    integer :: GPIO_4 = 18
    integer :: GPIO_5 = 23
    integer :: GPIO_6 = 24
    integer :: GPIO_7 = 25

    ! En caso que no se pase algun valor
    if (command_argument_count() /= 1) then
        print*, "No hay comando"
        print*, "los comandos a utilizar es config, valor, cerrar"
        stop 2  ! Numero invalido de argumentos
    end if

    ! Configurar GPIO como entradas
    call get_command_argument(1, command)
    if (trim(command) == "config") then
        ! Configurar los GPIO
        call export_gpio(GPIO_0)
        call export_gpio(GPIO_1)
        call export_gpio(GPIO_2)
        call export_gpio(GPIO_3)
        call export_gpio(GPIO_4)
        call export_gpio(GPIO_5)
        call export_gpio(GPIO_6)
        call export_gpio(GPIO_7)
    end if

    ! Cierre de los puertos GPIO
    if (trim(command) == "cerrar") then
        ! Cerrar los GPIO
        call unexport_gpio(GPIO_0)
        call unexport_gpio(GPIO_1)
        call unexport_gpio(GPIO_2)
        call unexport_gpio(GPIO_3)
        call unexport_gpio(GPIO_4)
        call unexport_gpio(GPIO_5)
        call unexport_gpio(GPIO_6)
        call unexport_gpio(GPIO_7)
    end if

    ! Leer valores de los GPIO
    if (trim(command) == "valor") then
        n = 100  ! Número de experimentos
        allocate(valores(n))
        do i = 1, n
            ! Leer los valores de los pines GPIO
            open(10, file='tiempo.txt', status='unknown', action='write')
            read(*, *) bit0
            read(*, *) bit1
            read(*, *) bit2
            read(*, *) bit3
            read(*, *) bit4
            read(*, *) bit5
            read(*, *) bit6
            read(*, *) bit7

            ! Calcular el número
            numero = bit0 + bit1 + bit2 + bit3 + bit4 + bit5 + bit6 + bit7

            ! Imprimir cada valor individual
            print*, "Bit 0:", bit0
            print*, "Bit 1:", bit1
            print*, "Bit 2:", bit2
            print*, "Bit 3:", bit3
            print*, "Bit 4:", bit4
            print*, "Bit 5:", bit5
            print*, "Bit 6:", bit6
            print*, "Bit 7:", bit7
            print*, "Número:", numero

            ! Generar la marca de tiempo y escribirla en el archivo
            write(10, *) i, date_and_time()
            close(10)

            ! Almacenar el número en el arreglo
            valores(i) = numero
        end do

        ! Escribir los números en un archivo
        open(20, file='valor.txt', status='unknown', action='write')
        write(20, *) valores
        close(20)
        deallocate(valores)
    end if

contains

    subroutine export_gpio(gpio_num)
        integer, intent(in) :: gpio_num
        character(len=100) :: export_cmd
        character(len=10) :: gpio_str
        write(gpio_str, '(I0)') gpio_num
        write(export_cmd, '(A,A)') "/sys/class/gpio/export ", trim(adjustl(gpio_str))
        call system('echo "'//trim(export_cmd)//'" > /sys/class/gpio/export')
        call sleep(1)  ! para asegurar que se exporto correctamente
        call system('echo "in" > /sys/class/gpio/gpio'//trim(adjustl(gpio_str))//'/direction')
    end subroutine export_gpio

    subroutine unexport_gpio(gpio_num)
        integer, intent(in) :: gpio_num
        character(len=100) :: unexport_cmd
        character(len=10) :: gpio_str
        write(gpio_str, '(I0)') gpio_num
        write(unexport_cmd, '(A,A)') "/sys/class/gpio/unexport ", trim(adjustl(gpio_str))
        call system('echo "'//trim(unexport_cmd)//'" > /sys/class/gpio/unexport')
    end subroutine unexport_gpio

end program

